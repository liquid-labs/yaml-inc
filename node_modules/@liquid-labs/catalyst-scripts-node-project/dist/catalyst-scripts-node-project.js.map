{"version":3,"file":"catalyst-scripts-node-project.js","sources":["../node_modules/lodash.camelcase/index.js","../node_modules/command-line-args/dist/index.js","../src/cli/catalyst-scripts-node-project.mjs"],"sourcesContent":["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsAstral = '[' + rsAstralRange + ']',\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n  rsUpper + '+' + rsOptUpperContr,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function(result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = camelCase;\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar camelCase = _interopDefault(require('lodash.camelcase'));\n\n/**\n * Takes any input and guarantees an array back.\n *\n * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.\n * - Converts `undefined` to an empty array.\n * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.\n * - Ignores input which is already an array.\n *\n * @module array-back\n * @example\n * > const arrayify = require('array-back')\n *\n * > arrayify(undefined)\n * []\n *\n * > arrayify(null)\n * [ null ]\n *\n * > arrayify(0)\n * [ 0 ]\n *\n * > arrayify([ 1, 2 ])\n * [ 1, 2 ]\n *\n * > arrayify(new Set([ 1, 2 ]))\n * [ 1, 2 ]\n *\n * > function f(){ return arrayify(arguments); }\n * > f(1,2,3)\n * [ 1, 2, 3 ]\n */\n\nfunction isObject (input) {\n  return typeof input === 'object' && input !== null\n}\n\nfunction isArrayLike (input) {\n  return isObject(input) && typeof input.length === 'number'\n}\n\n/**\n * @param {*} - The input value to convert to an array\n * @returns {Array}\n * @alias module:array-back\n */\nfunction arrayify (input) {\n  if (Array.isArray(input)) {\n    return input\n  }\n\n  if (input === undefined) {\n    return []\n  }\n\n  if (isArrayLike(input) || input instanceof Set) {\n    return Array.from(input)\n  }\n\n  return [ input ]\n}\n\n/**\n * Takes any input and guarantees an array back.\n *\n * - converts array-like objects (e.g. `arguments`) to a real array\n * - converts `undefined` to an empty array\n * - converts any another other, singular value (including `null`) into an array containing that value\n * - ignores input which is already an array\n *\n * @module array-back\n * @example\n * > const arrayify = require('array-back')\n *\n * > arrayify(undefined)\n * []\n *\n * > arrayify(null)\n * [ null ]\n *\n * > arrayify(0)\n * [ 0 ]\n *\n * > arrayify([ 1, 2 ])\n * [ 1, 2 ]\n *\n * > function f(){ return arrayify(arguments); }\n * > f(1,2,3)\n * [ 1, 2, 3 ]\n */\n\nfunction isObject$1 (input) {\n  return typeof input === 'object' && input !== null\n}\n\nfunction isArrayLike$1 (input) {\n  return isObject$1(input) && typeof input.length === 'number'\n}\n\n/**\n * @param {*} - the input value to convert to an array\n * @returns {Array}\n * @alias module:array-back\n */\nfunction arrayify$1 (input) {\n  if (Array.isArray(input)) {\n    return input\n  } else {\n    if (input === undefined) {\n      return []\n    } else if (isArrayLike$1(input)) {\n      return Array.prototype.slice.call(input)\n    } else {\n      return [ input ]\n    }\n  }\n}\n\n/**\n * Find and either replace or remove items in an array.\n *\n * @module find-replace\n * @example\n * > const findReplace = require('find-replace')\n * > const numbers = [ 1, 2, 3]\n *\n * > findReplace(numbers, n => n === 2, 'two')\n * [ 1, 'two', 3 ]\n *\n * > findReplace(numbers, n => n === 2, [ 'two', 'zwei' ])\n * [ 1, [ 'two', 'zwei' ], 3 ]\n *\n * > findReplace(numbers, n => n === 2, 'two', 'zwei')\n * [ 1, 'two', 'zwei', 3 ]\n *\n * > findReplace(numbers, n => n === 2) // no replacement, so remove\n * [ 1, 3 ]\n */\n\n/**\n * @param {array} - The input array\n * @param {testFn} - A predicate function which, if returning `true` causes the current item to be operated on.\n * @param [replaceWith] {...any} - If specified, found values will be replaced with these values, else removed.\n * @returns {array}\n * @alias module:find-replace\n */\nfunction findReplace (array, testFn) {\n  const found = [];\n  const replaceWiths = arrayify$1(arguments);\n  replaceWiths.splice(0, 2);\n\n  arrayify$1(array).forEach((value, index) => {\n    let expanded = [];\n    replaceWiths.forEach(replaceWith => {\n      if (typeof replaceWith === 'function') {\n        expanded = expanded.concat(replaceWith(value));\n      } else {\n        expanded.push(replaceWith);\n      }\n    });\n\n    if (testFn(value)) {\n      found.push({\n        index: index,\n        replaceWithValue: expanded\n      });\n    }\n  });\n\n  found.reverse().forEach(item => {\n    const spliceArgs = [ item.index, 1 ].concat(item.replaceWithValue);\n    array.splice.apply(array, spliceArgs);\n  });\n\n  return array\n}\n\n/**\n * Some useful tools for working with `process.argv`.\n *\n * @module argv-tools\n * @typicalName argvTools\n * @example\n * const argvTools = require('argv-tools')\n */\n\n/**\n * Regular expressions for matching option formats.\n * @static\n */\nconst re = {\n  short: /^-([^\\d-])$/,\n  long: /^--(\\S+)/,\n  combinedShort: /^-[^\\d-]{2,}$/,\n  optEquals: /^(--\\S+?)=(.*)/\n};\n\n/**\n * Array subclass encapsulating common operations on `process.argv`.\n * @static\n */\nclass ArgvArray extends Array {\n  /**\n   * Clears the array has loads the supplied input.\n   * @param {string[]} argv - The argv list to load. Defaults to `process.argv`.\n   */\n  load (argv) {\n    this.clear();\n    if (argv && argv !== process.argv) {\n      argv = arrayify(argv);\n    } else {\n      /* if no argv supplied, assume we are parsing process.argv */\n      argv = process.argv.slice(0);\n      const deleteCount = process.execArgv.some(isExecArg) ? 1 : 2;\n      argv.splice(0, deleteCount);\n    }\n    argv.forEach(arg => this.push(String(arg)));\n  }\n\n  /**\n   * Clear the array.\n   */\n  clear () {\n    this.length = 0;\n  }\n\n  /**\n   * expand ``--option=value` style args.\n   */\n  expandOptionEqualsNotation () {\n    if (this.some(arg => re.optEquals.test(arg))) {\n      const expandedArgs = [];\n      this.forEach(arg => {\n        const matches = arg.match(re.optEquals);\n        if (matches) {\n          expandedArgs.push(matches[1], matches[2]);\n        } else {\n          expandedArgs.push(arg);\n        }\n      });\n      this.clear();\n      this.load(expandedArgs);\n    }\n  }\n\n  /**\n   * expand getopt-style combinedShort options.\n   */\n  expandGetoptNotation () {\n    if (this.hasCombinedShortOptions()) {\n      findReplace(this, re.combinedShort, expandCombinedShortArg);\n    }\n  }\n\n  /**\n   * Returns true if the array contains combined short options (e.g. `-ab`).\n   * @returns {boolean}\n   */\n  hasCombinedShortOptions () {\n    return this.some(arg => re.combinedShort.test(arg))\n  }\n\n  static from (argv) {\n    const result = new this();\n    result.load(argv);\n    return result\n  }\n}\n\n/**\n * Expand a combined short option.\n * @param {string} - the string to expand, e.g. `-ab`\n * @returns {string[]}\n * @static\n */\nfunction expandCombinedShortArg (arg) {\n  /* remove initial hypen */\n  arg = arg.slice(1);\n  return arg.split('').map(letter => '-' + letter)\n}\n\n/**\n * Returns true if the supplied arg matches `--option=value` notation.\n * @param {string} - the arg to test, e.g. `--one=something`\n * @returns {boolean}\n * @static\n */\nfunction isOptionEqualsNotation (arg) {\n  return re.optEquals.test(arg)\n}\n\n/**\n * Returns true if the supplied arg is in either long (`--one`) or short (`-o`) format.\n * @param {string} - the arg to test, e.g. `--one`\n * @returns {boolean}\n * @static\n */\nfunction isOption (arg) {\n  return (re.short.test(arg) || re.long.test(arg)) && !re.optEquals.test(arg)\n}\n\n/**\n * Returns true if the supplied arg is in long (`--one`) format.\n * @param {string} - the arg to test, e.g. `--one`\n * @returns {boolean}\n * @static\n */\nfunction isLongOption (arg) {\n  return re.long.test(arg) && !isOptionEqualsNotation(arg)\n}\n\n/**\n * Returns the name from a long, short or `--options=value` arg.\n * @param {string} - the arg to inspect, e.g. `--one`\n * @returns {string}\n * @static\n */\nfunction getOptionName (arg) {\n  if (re.short.test(arg)) {\n    return arg.match(re.short)[1]\n  } else if (isLongOption(arg)) {\n    return arg.match(re.long)[1]\n  } else if (isOptionEqualsNotation(arg)) {\n    return arg.match(re.optEquals)[1].replace(/^--/, '')\n  } else {\n    return null\n  }\n}\n\nfunction isValue (arg) {\n  return !(isOption(arg) || re.combinedShort.test(arg) || re.optEquals.test(arg))\n}\n\nfunction isExecArg (arg) {\n  return ['--eval', '-e'].indexOf(arg) > -1 || arg.startsWith('--eval=')\n}\n\n/**\n * For type-checking Javascript values.\n * @module typical\n * @typicalname t\n * @example\n * const t = require('typical')\n */\n\n/**\n * Returns true if input is a number\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isNumber(0)\n * true\n * > t.isNumber(1)\n * true\n * > t.isNumber(1.1)\n * true\n * > t.isNumber(0xff)\n * true\n * > t.isNumber(0644)\n * true\n * > t.isNumber(6.2e5)\n * true\n * > t.isNumber(NaN)\n * false\n * > t.isNumber(Infinity)\n * false\n */\nfunction isNumber (n) {\n  return !isNaN(parseFloat(n)) && isFinite(n)\n}\n\n/**\n * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isPlainObject({ something: 'one' })\n * true\n * > t.isPlainObject(new Date())\n * false\n * > t.isPlainObject([ 0, 1 ])\n * false\n * > t.isPlainObject(/test/)\n * false\n * > t.isPlainObject(1)\n * false\n * > t.isPlainObject('one')\n * false\n * > t.isPlainObject(null)\n * false\n * > t.isPlainObject((function * () {})())\n * false\n * > t.isPlainObject(function * () {})\n * false\n */\nfunction isPlainObject (input) {\n  return input !== null && typeof input === 'object' && input.constructor === Object\n}\n\n/**\n * An array-like value has all the properties of an array, but is not an array instance. Examples in the `arguments` object. Returns true if the input value is an object, not null and has a `length` property with a numeric value.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * function sum(x, y){\n *     console.log(t.isArrayLike(arguments))\n *     // prints `true`\n * }\n */\nfunction isArrayLike$2 (input) {\n  return isObject$2(input) && typeof input.length === 'number'\n}\n\n/**\n * returns true if the typeof input is `'object'`, but not null!\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isObject$2 (input) {\n  return typeof input === 'object' && input !== null\n}\n\n/**\n * Returns true if the input value is defined\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isDefined (input) {\n  return typeof input !== 'undefined'\n}\n\n/**\n * Returns true if the input value is a string\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * Returns true if the input value is a boolean\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isBoolean (input) {\n  return typeof input === 'boolean'\n}\n\n/**\n * Returns true if the input value is a function\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isFunction (input) {\n  return typeof input === 'function'\n}\n\n/**\n * Returns true if the input value is an es2015 `class`.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isClass (input) {\n  if (isFunction(input)) {\n    return /^class /.test(Function.prototype.toString.call(input))\n  } else {\n    return false\n  }\n}\n\n/**\n * Returns true if the input is a string, number, symbol, boolean, null or undefined value.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isPrimitive (input) {\n  if (input === null) return true\n  switch (typeof input) {\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'undefined':\n    case 'boolean':\n      return true\n    default:\n      return false\n  }\n}\n\n/**\n * Returns true if the input is a Promise.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isPromise (input) {\n  if (input) {\n    const isPromise = isDefined(Promise) && input instanceof Promise;\n    const isThenable = input.then && typeof input.then === 'function';\n    return !!(isPromise || isThenable)\n  } else {\n    return false\n  }\n}\n\n/**\n * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isIterable('string')\n * true\n * > t.isIterable(new Map())\n * true\n * > t.isIterable([])\n * true\n * > t.isIterable((function * () {})())\n * true\n * > t.isIterable(Promise.resolve())\n * false\n * > t.isIterable(Promise)\n * false\n * > t.isIterable(true)\n * false\n * > t.isIterable({})\n * false\n * > t.isIterable(0)\n * false\n * > t.isIterable(1.1)\n * false\n * > t.isIterable(NaN)\n * false\n * > t.isIterable(Infinity)\n * false\n * > t.isIterable(function () {})\n * false\n * > t.isIterable(Date)\n * false\n * > t.isIterable()\n * false\n * > t.isIterable({ then: function () {} })\n * false\n */\nfunction isIterable (input) {\n  if (input === null || !isDefined(input)) {\n    return false\n  } else {\n    return (\n      typeof input[Symbol.iterator] === 'function' ||\n      typeof input[Symbol.asyncIterator] === 'function'\n    )\n  }\n}\n\nvar t = {\n  isNumber,\n  isString,\n  isBoolean,\n  isPlainObject,\n  isArrayLike: isArrayLike$2,\n  isObject: isObject$2,\n  isDefined,\n  isFunction,\n  isClass,\n  isPrimitive,\n  isPromise,\n  isIterable\n};\n\n/**\n * @module option-definition\n */\n\n/**\n * Describes a command-line option. Additionally, if generating a usage guide with [command-line-usage](https://github.com/75lb/command-line-usage) you could optionally add `description` and `typeLabel` properties to each definition.\n *\n * @alias module:option-definition\n * @typicalname option\n */\nclass OptionDefinition {\n  constructor (definition) {\n    /**\n    * The only required definition property is `name`, so the simplest working example is\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'file' },\n    *   { name: 'depth' }\n    * ]\n    * ```\n    *\n    * Where a `type` property is not specified it will default to `String`.\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | -------------------- | ------------ |\n    * | 1   | `--file` | `{ file: null }` |\n    * | 2   | `--file lib.js` | `{ file: 'lib.js' }` |\n    * | 3   | `--depth 2` | `{ depth: '2' }` |\n    *\n    * Unicode option names and aliases are valid, for example:\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'один' },\n    *   { name: '两' },\n    *   { name: 'три', alias: 'т' }\n    * ]\n    * ```\n    * @type {string}\n    */\n    this.name = definition.name;\n\n    /**\n    * The `type` value is a setter function (you receive the output from this), enabling you to be specific about the type and value received.\n    *\n    * The most common values used are `String` (the default), `Number` and `Boolean` but you can use a custom function, for example:\n    *\n    * ```js\n    * const fs = require('fs')\n    *\n    * class FileDetails {\n    *   constructor (filename) {\n    *     this.filename = filename\n    *     this.exists = fs.existsSync(filename)\n    *   }\n    * }\n    *\n    * const cli = commandLineArgs([\n    *   { name: 'file', type: filename => new FileDetails(filename) },\n    *   { name: 'depth', type: Number }\n    * ])\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ----------------- | ------------ |\n    * | 1   | `--file asdf.txt` | `{ file: { filename: 'asdf.txt', exists: false } }` |\n    *\n    * The `--depth` option expects a `Number`. If no value was set, you will receive `null`.\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ----------------- | ------------ |\n    * | 2   | `--depth` | `{ depth: null }` |\n    * | 3   | `--depth 2` | `{ depth: 2 }` |\n    *\n    * @type {function}\n    * @default String\n    */\n    this.type = definition.type || String;\n\n    /**\n    * getopt-style short option names. Can be any single character (unicode included) except a digit or hyphen.\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'hot', alias: 'h', type: Boolean },\n    *   { name: 'discount', alias: 'd', type: Boolean },\n    *   { name: 'courses', alias: 'c' , type: Number }\n    * ]\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `-hcd` | `{ hot: true, courses: null, discount: true }` |\n    * | 2   | `-hdc 3` | `{ hot: true, discount: true, courses: 3 }` |\n    *\n    * @type {string}\n    */\n    this.alias = definition.alias;\n\n    /**\n    * Set this flag if the option takes a list of values. You will receive an array of values, each passed through the `type` function (if specified).\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'files', type: String, multiple: true }\n    * ]\n    * ```\n    *\n    * Note, examples 1 and 3 below demonstrate \"greedy\" parsing which can be disabled by using `lazyMultiple`.\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 2   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 3   | `--files *` | `{ files: [ 'one.js', 'two.js' ] }` |\n    *\n    * @type {boolean}\n    */\n    this.multiple = definition.multiple;\n\n    /**\n     * Identical to `multiple` but with greedy parsing disabled.\n     *\n     * ```js\n     * const optionDefinitions = [\n     *   { name: 'files', lazyMultiple: true },\n     *   { name: 'verbose', alias: 'v', type: Boolean, lazyMultiple: true }\n     * ]\n     * ```\n     *\n     * | #   | argv input | commandLineArgs() output |\n     * | --- | ------------ | ------------ |\n     * | 1   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n     * | 2   | `-vvv` | `{ verbose: [ true, true, true ] }` |\n     *\n     * @type {boolean}\n     */\n    this.lazyMultiple = definition.lazyMultiple;\n\n    /**\n    * Any values unaccounted for by an option definition will be set on the `defaultOption`. This flag is typically set on the most commonly-used option to make for more concise usage (i.e. `$ example *.js` instead of `$ example --files *.js`).\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'files', multiple: true, defaultOption: true }\n    * ]\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 2   | `one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 3   | `*` | `{ files: [ 'one.js', 'two.js' ] }` |\n    *\n    * @type {boolean}\n    */\n    this.defaultOption = definition.defaultOption;\n\n    /**\n    * An initial value for the option.\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'files', multiple: true, defaultValue: [ 'one.js' ] },\n    *   { name: 'max', type: Number, defaultValue: 3 }\n    * ]\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   |  | `{ files: [ 'one.js' ], max: 3 }` |\n    * | 2   | `--files two.js` | `{ files: [ 'two.js' ], max: 3 }` |\n    * | 3   | `--max 4` | `{ files: [ 'one.js' ], max: 4 }` |\n    *\n    * @type {*}\n    */\n    this.defaultValue = definition.defaultValue;\n\n    /**\n    * When your app has a large amount of options it makes sense to organise them in groups.\n    *\n    * There are two automatic groups: `_all` (contains all options) and `_none` (contains options without a `group` specified in their definition).\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'verbose', group: 'standard' },\n    *   { name: 'help', group: [ 'standard', 'main' ] },\n    *   { name: 'compress', group: [ 'server', 'main' ] },\n    *   { name: 'static', group: 'server' },\n    *   { name: 'debug' }\n    * ]\n    * ```\n    *\n    *<table>\n    *  <tr>\n    *    <th>#</th><th>Command Line</th><th>commandLineArgs() output</th>\n    *  </tr>\n    *  <tr>\n    *    <td>1</td><td><code>--verbose</code></td><td><pre><code>\n    *{\n    *  _all: { verbose: true },\n    *  standard: { verbose: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>2</td><td><code>--debug</code></td><td><pre><code>\n    *{\n    *  _all: { debug: true },\n    *  _none: { debug: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>3</td><td><code>--verbose --debug --compress</code></td><td><pre><code>\n    *{\n    *  _all: {\n    *    verbose: true,\n    *    debug: true,\n    *    compress: true\n    *  },\n    *  standard: { verbose: true },\n    *  server: { compress: true },\n    *  main: { compress: true },\n    *  _none: { debug: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>4</td><td><code>--compress</code></td><td><pre><code>\n    *{\n    *  _all: { compress: true },\n    *  server: { compress: true },\n    *  main: { compress: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *</table>\n    *\n    * @type {string|string[]}\n    */\n    this.group = definition.group;\n\n    /* pick up any remaining properties */\n    for (const prop in definition) {\n      if (!this[prop]) this[prop] = definition[prop];\n    }\n  }\n\n  isBoolean () {\n    return this.type === Boolean || (t.isFunction(this.type) && this.type.name === 'Boolean')\n  }\n\n  isMultiple () {\n    return this.multiple || this.lazyMultiple\n  }\n\n  static create (def) {\n    const result = new this(def);\n    return result\n  }\n}\n\n/**\n * @module option-definitions\n */\n\n/**\n * @alias module:option-definitions\n */\nclass Definitions extends Array {\n  /**\n   * validate option definitions\n   * @param {boolean} [caseInsensitive=false] - whether arguments will be parsed in a case insensitive manner\n   * @returns {string}\n   */\n  validate (caseInsensitive) {\n    const someHaveNoName = this.some(def => !def.name);\n    if (someHaveNoName) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definitions: the `name` property is required on each definition'\n      );\n    }\n\n    const someDontHaveFunctionType = this.some(def => def.type && typeof def.type !== 'function');\n    if (someDontHaveFunctionType) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definitions: the `type` property must be a setter fuction (default: `Boolean`)'\n      );\n    }\n\n    let invalidOption;\n\n    const numericAlias = this.some(def => {\n      invalidOption = def;\n      return t.isDefined(def.alias) && t.isNumber(def.alias)\n    });\n    if (numericAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definition: to avoid ambiguity an alias cannot be numeric [--' + invalidOption.name + ' alias is -' + invalidOption.alias + ']'\n      );\n    }\n\n    const multiCharacterAlias = this.some(def => {\n      invalidOption = def;\n      return t.isDefined(def.alias) && def.alias.length !== 1\n    });\n    if (multiCharacterAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definition: an alias must be a single character'\n      );\n    }\n\n    const hypenAlias = this.some(def => {\n      invalidOption = def;\n      return def.alias === '-'\n    });\n    if (hypenAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definition: an alias cannot be \"-\"'\n      );\n    }\n\n    const duplicateName = hasDuplicates(this.map(def => caseInsensitive ? def.name.toLowerCase() : def.name));\n    if (duplicateName) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Two or more option definitions have the same name'\n      );\n    }\n\n    const duplicateAlias = hasDuplicates(this.map(def => caseInsensitive && t.isDefined(def.alias) ? def.alias.toLowerCase() : def.alias));\n    if (duplicateAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Two or more option definitions have the same alias'\n      );\n    }\n\n    const duplicateDefaultOption = this.filter(def => def.defaultOption === true).length > 1;\n    if (duplicateDefaultOption) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Only one option definition can be the defaultOption'\n      );\n    }\n\n    const defaultBoolean = this.some(def => {\n      invalidOption = def;\n      return def.isBoolean() && def.defaultOption\n    });\n    if (defaultBoolean) {\n      halt(\n        'INVALID_DEFINITIONS',\n        `A boolean option [\"${invalidOption.name}\"] can not also be the defaultOption.`\n      );\n    }\n  }\n\n  /**\n   * Get definition by option arg (e.g. `--one` or `-o`)\n   * @param {string} [arg] the argument name to get the definition for\n   * @param {boolean} [caseInsensitive] whether to use case insensitive comparisons when finding the appropriate definition\n   * @returns {Definition}\n   */\n  get (arg, caseInsensitive) {\n    if (isOption(arg)) {\n      if (re.short.test(arg)) {\n        const shortOptionName = getOptionName(arg);\n        if (caseInsensitive) {\n          const lowercaseShortOptionName = shortOptionName.toLowerCase();\n          return this.find(def => t.isDefined(def.alias) && def.alias.toLowerCase() === lowercaseShortOptionName)\n        } else {\n          return this.find(def => def.alias === shortOptionName)\n        }\n      } else {\n        const optionName = getOptionName(arg);\n        if (caseInsensitive) {\n          const lowercaseOptionName = optionName.toLowerCase();\n          return this.find(def => def.name.toLowerCase() === lowercaseOptionName)\n        } else {\n          return this.find(def => def.name === optionName)\n        }\n      }\n    } else {\n      return this.find(def => def.name === arg)\n    }\n  }\n\n  getDefault () {\n    return this.find(def => def.defaultOption === true)\n  }\n\n  isGrouped () {\n    return this.some(def => def.group)\n  }\n\n  whereGrouped () {\n    return this.filter(containsValidGroup)\n  }\n\n  whereNotGrouped () {\n    return this.filter(def => !containsValidGroup(def))\n  }\n\n  whereDefaultValueSet () {\n    return this.filter(def => t.isDefined(def.defaultValue))\n  }\n\n  static from (definitions, caseInsensitive) {\n    if (definitions instanceof this) return definitions\n    const result = super.from(arrayify(definitions), def => OptionDefinition.create(def));\n    result.validate(caseInsensitive);\n    return result\n  }\n}\n\nfunction halt (name, message) {\n  const err = new Error(message);\n  err.name = name;\n  throw err\n}\n\nfunction containsValidGroup (def) {\n  return arrayify(def.group).some(group => group)\n}\n\nfunction hasDuplicates (array) {\n  const items = {};\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (items[value]) {\n      return true\n    } else {\n      if (t.isDefined(value)) items[value] = true;\n    }\n  }\n}\n\n/**\n * @module argv-parser\n */\n\n/**\n * @alias module:argv-parser\n */\nclass ArgvParser {\n  /**\n   * @param {OptionDefinitions} - Definitions array\n   * @param {object} [options] - Options\n   * @param {string[]} [options.argv] - Overrides `process.argv`\n   * @param {boolean} [options.stopAtFirstUnknown] -\n   * @param {boolean} [options.caseInsensitive] - Arguments will be parsed in a case insensitive manner. Defaults to false.\n   */\n  constructor (definitions, options) {\n    this.options = Object.assign({}, options);\n    /**\n     * Option Definitions\n     */\n    this.definitions = Definitions.from(definitions, this.options.caseInsensitive);\n\n    /**\n     * Argv\n     */\n    this.argv = ArgvArray.from(this.options.argv);\n    if (this.argv.hasCombinedShortOptions()) {\n      findReplace(this.argv, re.combinedShort.test.bind(re.combinedShort), arg => {\n        arg = arg.slice(1);\n        return arg.split('').map(letter => ({ origArg: `-${arg}`, arg: '-' + letter }))\n      });\n    }\n  }\n\n  /**\n   * Yields one `{ event, name, value, arg, def }` argInfo object for each arg in `process.argv` (or `options.argv`).\n   */\n  * [Symbol.iterator] () {\n    const definitions = this.definitions;\n\n    let def;\n    let value;\n    let name;\n    let event;\n    let singularDefaultSet = false;\n    let unknownFound = false;\n    let origArg;\n\n    for (let arg of this.argv) {\n      if (t.isPlainObject(arg)) {\n        origArg = arg.origArg;\n        arg = arg.arg;\n      }\n\n      if (unknownFound && this.options.stopAtFirstUnknown) {\n        yield { event: 'unknown_value', arg, name: '_unknown', value: undefined };\n        continue\n      }\n\n      /* handle long or short option */\n      if (isOption(arg)) {\n        def = definitions.get(arg, this.options.caseInsensitive);\n        value = undefined;\n        if (def) {\n          value = def.isBoolean() ? true : null;\n          event = 'set';\n        } else {\n          event = 'unknown_option';\n        }\n\n      /* handle --option-value notation */\n      } else if (isOptionEqualsNotation(arg)) {\n        const matches = arg.match(re.optEquals);\n        def = definitions.get(matches[1], this.options.caseInsensitive);\n        if (def) {\n          if (def.isBoolean()) {\n            yield { event: 'unknown_value', arg, name: '_unknown', value, def };\n            event = 'set';\n            value = true;\n          } else {\n            event = 'set';\n            value = matches[2];\n          }\n        } else {\n          event = 'unknown_option';\n        }\n\n      /* handle value */\n      } else if (isValue(arg)) {\n        if (def) {\n          value = arg;\n          event = 'set';\n        } else {\n          /* get the defaultOption */\n          def = this.definitions.getDefault();\n          if (def && !singularDefaultSet) {\n            value = arg;\n            event = 'set';\n          } else {\n            event = 'unknown_value';\n            def = undefined;\n          }\n        }\n      }\n\n      name = def ? def.name : '_unknown';\n      const argInfo = { event, arg, name, value, def };\n      if (origArg) {\n        argInfo.subArg = arg;\n        argInfo.arg = origArg;\n      }\n      yield argInfo;\n\n      /* unknownFound logic */\n      if (name === '_unknown') unknownFound = true;\n\n      /* singularDefaultSet logic */\n      if (def && def.defaultOption && !def.isMultiple() && event === 'set') singularDefaultSet = true;\n\n      /* reset values once consumed and yielded */\n      if (def && def.isBoolean()) def = undefined;\n      /* reset the def if it's a singular which has been set */\n      if (def && !def.multiple && t.isDefined(value) && value !== null) {\n        def = undefined;\n      }\n      value = undefined;\n      event = undefined;\n      name = undefined;\n      origArg = undefined;\n    }\n  }\n}\n\nconst _value = new WeakMap();\n\n/**\n * Encapsulates behaviour (defined by an OptionDefinition) when setting values\n */\nclass Option {\n  constructor (definition) {\n    this.definition = new OptionDefinition(definition);\n    this.state = null; /* set or default */\n    this.resetToDefault();\n  }\n\n  get () {\n    return _value.get(this)\n  }\n\n  set (val) {\n    this._set(val, 'set');\n  }\n\n  _set (val, state) {\n    const def = this.definition;\n    if (def.isMultiple()) {\n      /* don't add null or undefined to a multiple */\n      if (val !== null && val !== undefined) {\n        const arr = this.get();\n        if (this.state === 'default') arr.length = 0;\n        arr.push(def.type(val));\n        this.state = state;\n      }\n    } else {\n      /* throw if already set on a singlar defaultOption */\n      if (!def.isMultiple() && this.state === 'set') {\n        const err = new Error(`Singular option already set [${this.definition.name}=${this.get()}]`);\n        err.name = 'ALREADY_SET';\n        err.value = val;\n        err.optionName = def.name;\n        throw err\n      } else if (val === null || val === undefined) {\n        _value.set(this, val);\n        // /* required to make 'partial: defaultOption with value equal to defaultValue 2' pass */\n        // if (!(def.defaultOption && !def.isMultiple())) {\n        //   this.state = state\n        // }\n      } else {\n        _value.set(this, def.type(val));\n        this.state = state;\n      }\n    }\n  }\n\n  resetToDefault () {\n    if (t.isDefined(this.definition.defaultValue)) {\n      if (this.definition.isMultiple()) {\n        _value.set(this, arrayify(this.definition.defaultValue).slice());\n      } else {\n        _value.set(this, this.definition.defaultValue);\n      }\n    } else {\n      if (this.definition.isMultiple()) {\n        _value.set(this, []);\n      } else {\n        _value.set(this, null);\n      }\n    }\n    this.state = 'default';\n  }\n\n  static create (definition) {\n    definition = new OptionDefinition(definition);\n    if (definition.isBoolean()) {\n      return FlagOption.create(definition)\n    } else {\n      return new this(definition)\n    }\n  }\n}\n\nclass FlagOption extends Option {\n  set (val) {\n    super.set(true);\n  }\n\n  static create (def) {\n    return new this(def)\n  }\n}\n\n/**\n * A map of { DefinitionNameString: Option }. By default, an Output has an `_unknown` property and any options with defaultValues.\n */\nclass Output extends Map {\n  constructor (definitions) {\n    super();\n    /**\n     * @type {OptionDefinitions}\n     */\n    this.definitions = Definitions.from(definitions);\n\n    /* by default, an Output has an `_unknown` property and any options with defaultValues */\n    this.set('_unknown', Option.create({ name: '_unknown', multiple: true }));\n    for (const def of this.definitions.whereDefaultValueSet()) {\n      this.set(def.name, Option.create(def));\n    }\n  }\n\n  toObject (options) {\n    options = options || {};\n    const output = {};\n    for (const item of this) {\n      const name = options.camelCase && item[0] !== '_unknown' ? camelCase(item[0]) : item[0];\n      const option = item[1];\n      if (name === '_unknown' && !option.get().length) continue\n      output[name] = option.get();\n    }\n\n    if (options.skipUnknown) delete output._unknown;\n    return output\n  }\n}\n\nclass GroupedOutput extends Output {\n  toObject (options) {\n    const superOutputNoCamel = super.toObject({ skipUnknown: options.skipUnknown });\n    const superOutput = super.toObject(options);\n    const unknown = superOutput._unknown;\n    delete superOutput._unknown;\n    const grouped = {\n      _all: superOutput\n    };\n    if (unknown && unknown.length) grouped._unknown = unknown;\n\n    this.definitions.whereGrouped().forEach(def => {\n      const name = options.camelCase ? camelCase(def.name) : def.name;\n      const outputValue = superOutputNoCamel[def.name];\n      for (const groupName of arrayify(def.group)) {\n        grouped[groupName] = grouped[groupName] || {};\n        if (t.isDefined(outputValue)) {\n          grouped[groupName][name] = outputValue;\n        }\n      }\n    });\n\n    this.definitions.whereNotGrouped().forEach(def => {\n      const name = options.camelCase ? camelCase(def.name) : def.name;\n      const outputValue = superOutputNoCamel[def.name];\n      if (t.isDefined(outputValue)) {\n        if (!grouped._none) grouped._none = {};\n        grouped._none[name] = outputValue;\n      }\n    });\n    return grouped\n  }\n}\n\n/**\n * @module command-line-args\n */\n\n/**\n * Returns an object containing all option values set on the command line. By default it parses the global  [`process.argv`](https://nodejs.org/api/process.html#process_process_argv) array.\n *\n * Parsing is strict by default - an exception is thrown if the user sets a singular option more than once or sets an unknown value or option (one without a valid [definition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md)). To be more permissive, enabling [partial](https://github.com/75lb/command-line-args/wiki/Partial-mode-example) or [stopAtFirstUnknown](https://github.com/75lb/command-line-args/wiki/stopAtFirstUnknown) modes will return known options in the usual manner while collecting unknown arguments in a separate `_unknown` property.\n *\n * @param {Array<OptionDefinition>} - An array of [OptionDefinition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md) objects\n * @param {object} [options] - Options.\n * @param {string[]} [options.argv] - An array of strings which, if present will be parsed instead  of `process.argv`.\n * @param {boolean} [options.partial] - If `true`, an array of unknown arguments is returned in the `_unknown` property of the output.\n * @param {boolean} [options.stopAtFirstUnknown] - If `true`, parsing will stop at the first unknown argument and the remaining arguments returned in `_unknown`. When set, `partial: true` is also implied.\n * @param {boolean} [options.camelCase] - If `true`, options with hypenated names (e.g. `move-to`) will be returned in camel-case (e.g. `moveTo`).\n * @param {boolean} [options.caseInsensitive] - If `true`, the case of each option name or alias parsed is insignificant. In other words, both `--Verbose` and `--verbose`, `-V` and `-v` would be equivalent. Defaults to false.\n * @returns {object}\n * @throws `UNKNOWN_OPTION` If `options.partial` is false and the user set an undefined option. The `err.optionName` property contains the arg that specified an unknown option, e.g. `--one`.\n * @throws `UNKNOWN_VALUE` If `options.partial` is false and the user set a value unaccounted for by an option definition. The `err.value` property contains the unknown value, e.g. `5`.\n * @throws `ALREADY_SET` If a user sets a singular, non-multiple option more than once. The `err.optionName` property contains the option name that has already been set, e.g. `one`.\n * @throws `INVALID_DEFINITIONS`\n *   - If an option definition is missing the required `name` property\n *   - If an option definition has a `type` value that's not a function\n *   - If an alias is numeric, a hyphen or a length other than 1\n *   - If an option definition name was used more than once\n *   - If an option definition alias was used more than once\n *   - If more than one option definition has `defaultOption: true`\n *   - If a `Boolean` option is also set as the `defaultOption`.\n * @alias module:command-line-args\n */\nfunction commandLineArgs (optionDefinitions, options) {\n  options = options || {};\n  if (options.stopAtFirstUnknown) options.partial = true;\n  optionDefinitions = Definitions.from(optionDefinitions, options.caseInsensitive);\n\n  const parser = new ArgvParser(optionDefinitions, {\n    argv: options.argv,\n    stopAtFirstUnknown: options.stopAtFirstUnknown,\n    caseInsensitive: options.caseInsensitive\n  });\n\n  const OutputClass = optionDefinitions.isGrouped() ? GroupedOutput : Output;\n  const output = new OutputClass(optionDefinitions);\n\n  /* Iterate the parser setting each known value to the output. Optionally, throw on unknowns. */\n  for (const argInfo of parser) {\n    const arg = argInfo.subArg || argInfo.arg;\n    if (!options.partial) {\n      if (argInfo.event === 'unknown_value') {\n        const err = new Error(`Unknown value: ${arg}`);\n        err.name = 'UNKNOWN_VALUE';\n        err.value = arg;\n        throw err\n      } else if (argInfo.event === 'unknown_option') {\n        const err = new Error(`Unknown option: ${arg}`);\n        err.name = 'UNKNOWN_OPTION';\n        err.optionName = arg;\n        throw err\n      }\n    }\n\n    let option;\n    if (output.has(argInfo.name)) {\n      option = output.get(argInfo.name);\n    } else {\n      option = Option.create(argInfo.def);\n      output.set(argInfo.name, option);\n    }\n\n    if (argInfo.name === '_unknown') {\n      option.set(arg);\n    } else {\n      option.set(argInfo.value);\n    }\n  }\n\n  return output.toObject({ skipUnknown: !options.partial, camelCase: options.camelCase })\n}\n\nmodule.exports = commandLineArgs;\n","import { existsSync } from 'node:fs'\nimport * as fs from 'node:fs/promises'\nimport * as fsPath from 'node:path'\n\nimport commandLineArgs from 'command-line-args'\n\nconst optionsSpec = [\n  { name : 'cli-only', type : Boolean, group : 'selector' },\n  { name : 'update-gitignore', type : Boolean, group : 'selector' },\n  { name : 'lib-only', type : Boolean, group : 'selector' }, // <- this is the default behavior\n  { name : 'update-makefile', type : Boolean, group : 'selector' },\n  { name : 'with-cli', type : Boolean, group : 'selector' },\n  { name : 'no-makefile', type : Boolean, group : 'selector' },\n\n  { name : 'src', type : String, group : 'path' },\n  { name : 'cli-path-suffix', type : String, group : 'path' },\n  { name : 'cli-entry-file', type : String, group : 'path' },\n  { name : 'lib-path-suffix', type : String, group : 'path' },\n  { name : 'lib-entry-file', type : String, group : 'path' },\n\n  { name : 'name', type : String, group : 'name' },\n  { name : 'cli-name', type : String, group : 'name' },\n\n  { name : 'with-sourcemaps-test', type : Boolean }\n]\n\nconst options = commandLineArgs(optionsSpec)\nconst selectors = options.selector\nconst paths = options.path\nconst names = options.name\n\nconst srcPath = paths.src || 'src'\nconst fileUpdateOnly = selectors['update-gitignore'] === true || selectors['update-makefile'] === true\n\nconst includeCLI = (fileUpdateOnly !== true && selectors['lib-only'] !== true)\n  && (selectors['cli-only'] === true || selectors['with-cli'] === true)\nconst includeLib = (fileUpdateOnly !== true && selectors['cli-only'] !== true) || process.argv.length === 2\nconst includeMakefile = selectors['update-makefile'] === true\n  || (selectors['update-gitignore'] !== true && selectors['no-makefile'] !== true)\nconst deleteSourceMapsTest = options._all['with-sourcemaps-test'] !== true\nconst includeGitignore = selectors['update-gitignore'] === true\n\nconst addCLIToPkgJSON = async(pkgJSON) => {\n  const buildKey = getBuildKey(pkgJSON)\n  const cliKey = buildKey + '-cli'\n\n  pkgJSON.bin = {\n    [buildKey] : `dist/${cliKey}.js`\n  }\n  await fs.writeFile('package.json', JSON.stringify(pkgJSON, null, '  '))\n}\n\nconst copyBootstrapCode = async() => {\n  const bootstrapSrc = fsPath.join(__dirname, (includeLib ? 'bootstrap' : 'bootstrap-cli-only'))\n  let libPath\n  if (includeCLI === true && includeLib === true) {\n    libPath = fsPath.join(srcPath, 'lib')\n    await fs.cp(bootstrapSrc, srcPath, { recursive : true })\n  }\n  else if (includeCLI === true) {\n    await fs.cp(fsPath.join(bootstrapSrc), srcPath, { recursive : true })\n  }\n  else if (includeLib === true) {\n    libPath = srcPath\n    await fs.cp(fsPath.join(bootstrapSrc, 'lib'), srcPath, { recursive : true })\n  }\n\n  if (includeLib && deleteSourceMapsTest === true) {\n    const testPath = fsPath.join(libPath, 'test', 'sourcemaps.test.js')\n    await fs.rm(testPath)\n  }\n}\n\nconst copyGitignore = async() => {\n  const gitignoreSrc = fsPath.join(__dirname, 'gitignore')\n  const gitignoreTarget = '.gitignore'\n  await fs.cp(gitignoreSrc, gitignoreTarget)\n}\n\nconst copyMakefile = async({ pkgJSON }) => {\n  const buildKey = getBuildKey(pkgJSON)\n\n  let preamble = `BUILD_KEY:=${buildKey}\\nSRC:=${srcPath}\\n`\n\n  const withCLI = (fileUpdateOnly && (selectors['with-cli'] === true || selectors['cli-only'])) || includeCLI\n  const withLib = (fileUpdateOnly && selectors['cli-only'] !== true) || includeLib\n\n  const cliSuffix = paths['cli-path-suffix'] || 'cli'\n  const libSuffix = paths['lib-path-suffix'] || 'lib'\n  const cliEntry = paths['cli-entry-file'] || 'index.js'\n  const libEntry = paths['lib-entry-file'] || 'index.js'\n\n  const cliName = (\n    names['cli-name']\n    || (withCLI === true && withLib === false && names.name) // notice, only if no lib\n    || buildKey + '-cli'\n  ) + '.js'\n\n  if (withCLI === true && withLib === true) {\n    preamble += `CATALYST_JS_LIB_SRC_PATH:=$(SRC)/${libSuffix}\\n`\n    preamble += `CATALYST_NODE_PROJECT_LIB_ENTRY_POINT=$(CATALYST_JS_LIB_SRC_PATH)/${libEntry}\\n`\n    preamble += `CATALYST_JS_CLI_SRC_PATH:=$(SRC)/${cliSuffix}\\n`\n    preamble += `CATALYST_NODE_PROJECT_CLI_ENTRY_POINT=$(CATALYST_JS_CLI_SRC_PATH)/${cliEntry}\\n`\n    // notice it's '=', not ':=', because DIST is defined later so we need to eval this on use\n    preamble += `CATALYST_JS_CLI=$(DIST)/${cliName}\\n`\n  }\n  else if (withCLI === true) {\n    const cliPath = paths['cli-path-suffix'] !== undefined\n      ? fsPath.join('$(SRC)', cliSuffix)\n      : '$(SRC)'\n    preamble += `CATALYST_JS_CLI_SRC_PATH:=${cliPath}\\n`\n    preamble += `CATALYST_NODE_PROJECT_CLI_ENTRY_POINT=$(CATALYST_JS_CLI_SRC_PATH)/${cliEntry}\\n`\n    preamble += `CATALYST_JS_CLI=$(DIST)/${cliName}\\n`\n  }\n  else if (withLib) { // lib only\n    const libPath = paths['lib-path-suffix'] !== undefined\n      ? fsPath.join('$(SRC)', libSuffix)\n      : '$(SRC)'\n    preamble += `CATALYST_JS_LIB_SRC_PATH:=${libPath}\\n`\n    preamble += `CATALYST_NODE_PROJECT_LIB_ENTRY_POINT=$(CATALYST_JS_LIB_SRC_PATH)/${libEntry}\\n`\n  }\n  else {\n    console.error('Could not determine Makefile preamble; check options or submit bug report.')\n    process.exit(13)\n  }\n\n  await fs.writeFile('Makefile', preamble)\n\n  const mkSrc = fsPath.join(__dirname, 'make', 'javascript.mk')\n  const mkContents = await fs.readFile(mkSrc, { encoding : 'utf8' })\n  await fs.appendFile('Makefile', mkContents)\n}\n\nconst getBuildKey = (pkgJSON) => {\n  if (names.name !== undefined) {\n    return names.name\n  }\n  // else\n  const pkgName = pkgJSON.name\n  return pkgName.replace(/^@[^/]+\\//, '')\n}\n\n(async() => {\n  const pkgJSON = JSON.parse(await fs.readFile('package.json', { encoding : 'utf8' }))\n  const promises = []\n\n  if (includeCLI || includeLib) {\n    console.log('Setting up package...')\n    if (existsSync(srcPath)) {\n      console.error(`Source path '${srcPath}' already present.`)\n      process.exit(0)\n    }\n\n    // this will figure out which is which\n    promises.push(copyBootstrapCode())\n\n    if (includeCLI === true) {\n      promises.push(addCLIToPkgJSON(pkgJSON))\n    }\n  }\n  if (includeGitignore === true) {\n    promises.push(copyGitignore())\n  }\n  if (includeMakefile === true) {\n    promises.push(copyMakefile({ pkgJSON }))\n  }\n\n  await Promise.all(promises)\n  process.exit(0)\n})()\n"],"names":["INFINITY","symbolTag","reAsciiWord","reLatin","rsAstralRange","rsComboMarksRange","rsComboSymbolsRange","rsDingbatRange","rsLowerRange","rsUpperRange","rsVarRange","rsBreakRange","rsMathOpRange","rsApos","rsAstral","rsBreak","rsCombo","rsDigits","rsDingbat","rsLower","rsMisc","rsFitz","rsNonAstral","rsRegional","rsSurrPair","rsUpper","rsZWJ","rsLowerMisc","rsUpperMisc","rsOptLowerContr","rsOptUpperContr","reOptMod","rsOptVar","rsSeq","join","rsEmoji","rsSymbol","reApos","RegExp","reComboMark","reUnicode","reUnicodeWord","reHasUnicode","reHasUnicodeWord","freeGlobal","global","Object","freeSelf","self","root","Function","object","deburrLetter","key","undefined","hasUnicode","string","test","stringToArray","match","unicodeToArray","split","asciiToArray","objectToString","prototype","toString","Symbol","symbolProto","symbolToString","baseToString","value","isObjectLike","call","isSymbol","result","castSlice","array","start","end","length","index","Array","baseSlice","callback","camelCase","word","toLowerCase","upperFirst","iteratee","accumulator","initAccum","arrayReduce","pattern","guard","hasUnicodeWord","unicodeWords","asciiWords","words","replace","deburr","methodName","strSymbols","chr","charAt","trailing","slice","ex","arrayify","input","isArray","isObject","isArrayLike","Set","from","arrayify$1","isObject$1","isArrayLike$1","findReplace","testFn","found","replaceWiths","arguments","splice","forEach","expanded","replaceWith","concat","push","replaceWithValue","reverse","item","spliceArgs","apply","re","short","long","combinedShort","optEquals","ArgvArray","load","argv","this","clear","process","deleteCount","execArgv","some","isExecArg","arg","String","expandOptionEqualsNotation","expandedArgs","matches","expandGetoptNotation","hasCombinedShortOptions","expandCombinedShortArg","static","map","letter","isOptionEqualsNotation","isOption","getOptionName","isLongOption","isValue","indexOf","startsWith","isObject$2","isDefined","isFunction","t","isNumber","n","isNaN","parseFloat","isFinite","isString","isBoolean","isPlainObject","constructor","isClass","isPrimitive","isPromise","Promise","isThenable","then","isIterable","iterator","asyncIterator","OptionDefinition","definition","name","type","alias","multiple","lazyMultiple","defaultOption","defaultValue","group","prop","Boolean","isMultiple","def","Definitions","validate","caseInsensitive","halt","invalidOption","hasDuplicates","filter","get","shortOptionName","lowercaseShortOptionName","find","optionName","lowercaseOptionName","getDefault","isGrouped","whereGrouped","containsValidGroup","whereNotGrouped","whereDefaultValueSet","definitions","super","create","message","err","Error","items","i","ArgvParser","options","assign","bind","origArg","event","singularDefaultSet","unknownFound","stopAtFirstUnknown","argInfo","subArg","_value","WeakMap","Option","state","resetToDefault","set","val","_set","arr","FlagOption","Output","Map","toObject","output","option","skipUnknown","_unknown","GroupedOutput","superOutputNoCamel","superOutput","unknown","grouped","_all","outputValue","groupName","_none","dist","optionDefinitions","partial","parser","has","commandLineArgs","selectors","selector","paths","path","names","srcPath","src","fileUpdateOnly","includeCLI","includeLib","includeMakefile","deleteSourceMapsTest","includeGitignore","addCLIToPkgJSON","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pkgJSON","buildKey","cliKey","wrap","_context","prev","next","getBuildKey","bin","_defineProperty","fs","writeFile","JSON","stringify","stop","_x","copyBootstrapCode","_ref2","_callee2","bootstrapSrc","libPath","testPath","_context2","fsPath","__dirname","cp","recursive","rm","copyGitignore","_ref3","_callee3","gitignoreSrc","_context3","copyMakefile","_ref5","_callee4","_ref4","preamble","withCLI","withLib","cliSuffix","libSuffix","cliEntry","libEntry","cliName","cliPath","mkSrc","mkContents","_context4","console","error","exit","readFile","encoding","sent","appendFile","_x2","_callee5","promises","_context5","t0","t1","parse","log","existsSync","all"],"mappings":"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","x_google_ignoreList":[0,1]}