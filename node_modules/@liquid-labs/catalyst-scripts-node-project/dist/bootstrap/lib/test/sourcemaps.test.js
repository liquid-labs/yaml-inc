/* global describe expect test */
import * as fs from 'node:fs/promises'
import { join } from 'node:path'

import * as sourceMap from 'source-map'

describe('source maps', () => {
  test("Maps from 'function' line to original position", async() => {
    const compiledFile = await fs.readFile(
      join(__dirname, '..', '..', '..', 'dist', 'bootstrap.js'),
      { encoding : 'utf8' }
    )

    let line, column
    compiledFile.split('\n').some((l, i) => {
      column = l.indexOf('function')
      if (column !== -1) {
        line = i + 1
        return true
      }
      return false
    })

    const smData = await fs.readFile(
      join(__dirname, '..', '..', '..', 'dist', 'bootstrap.js.map'),
      { encoding : 'utf8' }
    )

    const smc = await new sourceMap.SourceMapConsumer(smData)
    try {
      const origPos = await smc.originalPositionFor({ line/* one based */, column/* zero based */ })
      console.log(origPos)
      expect(origPos.line).toBe(14)
    }
    finally { smc.destroy?.() } // the docs say to call this, but we get an error when we do so.
  })
})
