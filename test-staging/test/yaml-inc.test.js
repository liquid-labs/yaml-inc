"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
var fsPath = _interopRequireWildcard(require("node:path"));
var _yamlInc = require("../yaml-inc");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* global describe expect test */

var simplePath = fsPath.join(__dirname, 'data', 'simple.yaml');
var expectedSimple = {
  foo: 'foo',
  bar: 'bar',
  list: [1, 2]
};
var includeSimplePath = fsPath.join(__dirname, 'data', 'include-simple.yaml');
var expectedIncludeSimple = Object.assign({
  baz: 'baz'
}, expectedSimple, {
  boo: 'boo'
});
describe('yamlLoad', function () {
  test('loads a standard YAML file', function () {
    return expect((0, _yamlInc.loadYAML)(simplePath)).toEqual(expectedSimple);
  });
  test('processes a 1st level include', function () {
    return expect((0, _yamlInc.loadYAML)(includeSimplePath)).toEqual(expectedIncludeSimple);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmc1BhdGgiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfeWFtbEluYyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJzaW1wbGVQYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImV4cGVjdGVkU2ltcGxlIiwiZm9vIiwiYmFyIiwibGlzdCIsImluY2x1ZGVTaW1wbGVQYXRoIiwiZXhwZWN0ZWRJbmNsdWRlU2ltcGxlIiwiYXNzaWduIiwiYmF6IiwiYm9vIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZXhwZWN0IiwibG9hZFlBTUwiLCJ0b0VxdWFsIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3QveWFtbC1pbmMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgZGVzY3JpYmUgZXhwZWN0IHRlc3QgKi9cbmltcG9ydCAqIGFzIGZzUGF0aCBmcm9tICdub2RlOnBhdGgnXG5cbmltcG9ydCB7IGxvYWRZQU1MLCBsb2FkWUFNTEFzeW5jIH0gZnJvbSAnLi4veWFtbC1pbmMnXG5cbmNvbnN0IHNpbXBsZVBhdGggPSBmc1BhdGguam9pbihfX2Rpcm5hbWUsICdkYXRhJywgJ3NpbXBsZS55YW1sJylcbmNvbnN0IGV4cGVjdGVkU2ltcGxlID0ge1xuICBmb286ICdmb28nLFxuICBiYXI6ICdiYXInLFxuICBsaXN0OiBbIDEsIDIgXVxufVxuXG5jb25zdCBpbmNsdWRlU2ltcGxlUGF0aCA9IGZzUGF0aC5qb2luKF9fZGlybmFtZSwgJ2RhdGEnLCAnaW5jbHVkZS1zaW1wbGUueWFtbCcpXG5jb25zdCBleHBlY3RlZEluY2x1ZGVTaW1wbGUgPSBPYmplY3QuYXNzaWduKHsgYmF6OiAnYmF6JyB9LCBleHBlY3RlZFNpbXBsZSwgeyBib286ICdib28nIH0pXG5cbmRlc2NyaWJlKCd5YW1sTG9hZCcsICgpID0+IHtcbiAgdGVzdCgnbG9hZHMgYSBzdGFuZGFyZCBZQU1MIGZpbGUnLCAoKSA9PiBleHBlY3QobG9hZFlBTUwoc2ltcGxlUGF0aCkpLnRvRXF1YWwoZXhwZWN0ZWRTaW1wbGUpKVxuXG4gIHRlc3QoJ3Byb2Nlc3NlcyBhIDFzdCBsZXZlbCBpbmNsdWRlJywgKCkgPT4gZXhwZWN0KGxvYWRZQU1MKGluY2x1ZGVTaW1wbGVQYXRoKSkudG9FcXVhbChleHBlY3RlZEluY2x1ZGVTaW1wbGUpKVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQXFELFNBQUFFLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBSix3QkFBQVEsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLGFBQUFFLE9BQUEsQ0FBQUYsR0FBQSx5QkFBQUEsR0FBQSx1Q0FBQUEsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLGNBQUFOLEdBQUEsTUFBQUcsS0FBQSxJQUFBQSxLQUFBLENBQUFhLEdBQUEsQ0FBQWhCLEdBQUEsRUFBQU0sTUFBQSxZQUFBQSxNQUFBO0FBSHJEOztBQUtBLElBQU1XLFVBQVUsR0FBRzFCLE1BQU0sQ0FBQzJCLElBQUksQ0FBQ0MsU0FBUyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUM7QUFDaEUsSUFBTUMsY0FBYyxHQUFHO0VBQ3JCQyxHQUFHLEVBQUUsS0FBSztFQUNWQyxHQUFHLEVBQUUsS0FBSztFQUNWQyxJQUFJLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFFRCxJQUFNQyxpQkFBaUIsR0FBR2pDLE1BQU0sQ0FBQzJCLElBQUksQ0FBQ0MsU0FBUyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQztBQUMvRSxJQUFNTSxxQkFBcUIsR0FBR2pCLE1BQU0sQ0FBQ2tCLE1BQU0sQ0FBQztFQUFFQyxHQUFHLEVBQUU7QUFBTSxDQUFDLEVBQUVQLGNBQWMsRUFBRTtFQUFFUSxHQUFHLEVBQUU7QUFBTSxDQUFDLENBQUM7QUFFM0ZDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsWUFBTTtFQUN6QkMsSUFBSSxDQUFDLDRCQUE0QixFQUFFO0lBQUEsT0FBTUMsTUFBTSxDQUFDLElBQUFDLGlCQUFRLEVBQUNmLFVBQVUsQ0FBQyxDQUFDLENBQUNnQixPQUFPLENBQUNiLGNBQWMsQ0FBQztFQUFBLEVBQUM7RUFFOUZVLElBQUksQ0FBQywrQkFBK0IsRUFBRTtJQUFBLE9BQU1DLE1BQU0sQ0FBQyxJQUFBQyxpQkFBUSxFQUFDUixpQkFBaUIsQ0FBQyxDQUFDLENBQUNTLE9BQU8sQ0FBQ1IscUJBQXFCLENBQUM7RUFBQSxFQUFDO0FBQ2pILENBQUMsQ0FBQyJ9